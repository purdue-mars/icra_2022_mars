diff --git a/detectron2 b/detectron2
index 42ef395..be67214 160000
--- a/detectron2
+++ b/detectron2
@@ -1 +1 @@
-Subproject commit 42ef395311e8f4d9ff189416ba89f7c9c3d07258
+Subproject commit be67214add717fbdd0157521b2e63ea025164284-dirty
diff --git a/launch/detectron2_ros.launch b/launch/detectron2_ros.launch
index 8eb3606..224a647 100644
--- a/launch/detectron2_ros.launch
+++ b/launch/detectron2_ros.launch
@@ -1,8 +1,8 @@
 <launch>
-  <arg name="input" default="ViMantic/ToCNN" />
-  <arg name="detection_threshold" default="0.5" />
-  <arg name="config" default="$(find detectron2_ros)/detectron2/configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml" />
-  <arg name="model" default="detectron2://COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x/137849600/model_final_f10217.pkl" />
+  <arg name="input" default="/d405/camera/color/image_raw" />
+  <arg name="detection_threshold" default="0.8" />
+  <arg name="config" default="$(find detectron2_ros)/config/data.yml" />
+  <arg name="model" default="$(find detectron2_ros)/config/model_final.pth" />
   <arg name="visualization" default="true" />
 
   <node name="detectron2_ros"  pkg="detectron2_ros" type="detectron2_ros" output="screen" >
diff --git a/src/detectron2_ros b/src/detectron2_ros
index cde60e9..da2a9d9 100755
--- a/src/detectron2_ros
+++ b/src/detectron2_ros
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 import sys
 import threading
 import time
@@ -9,6 +9,7 @@ import rospy
 from detectron2.config import get_cfg
 from detectron2.data import MetadataCatalog
 from cv_bridge import CvBridge, CvBridgeError
+
 # import some common detectron2 utilities
 from detectron2.engine import DefaultPredictor
 from detectron2.utils.logger import setup_logger
@@ -28,16 +29,20 @@ class Detectron2node(object):
         self._image_counter = 0
 
         self.cfg = get_cfg()
-        self.cfg.merge_from_file(self.load_param('~config'))
-        self.cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = self.load_param('~detection_threshold') # set threshold for this model
-        self.cfg.MODEL.WEIGHTS = self.load_param('~model')
+        self.cfg.merge_from_file(self.load_param("~config"))
+        self.cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = self.load_param(
+            "~detection_threshold"
+        )  # set threshold for this model
+        self.cfg.MODEL.WEIGHTS = self.load_param("~model")
         self.predictor = DefaultPredictor(self.cfg)
-        self._class_names = MetadataCatalog.get(self.cfg.DATASETS.TRAIN[0]).get("thing_classes", None)
-
-        self._visualization = self.load_param('~visualization',True)
-        self._result_pub = rospy.Publisher('~result', Result, queue_size=1)
-        self._vis_pub = rospy.Publisher('~visualization', Image, queue_size=1)
-        self._sub = rospy.Subscriber(self.load_param('~input'), Image, self.callback_image, queue_size=1)
+        self._class_names = self.cfg.DATASETS.CLASS_NAMES 
+
+        self._visualization = self.load_param("~visualization", True)
+        self._result_pub = rospy.Publisher("~result", Result, queue_size=1)
+        self._vis_pub = rospy.Publisher("~visualization", Image, queue_size=1)
+        self._sub = rospy.Subscriber(
+            self.load_param("~input"), Image, self.callback_image, queue_size=1
+        )
         self.start_time = time.time()
         rospy.logwarn("Initialized")
 
@@ -56,8 +61,10 @@ class Detectron2node(object):
             if img_msg is not None:
                 self._image_counter = self._image_counter + 1
                 if (self._image_counter % 11) == 10:
-                    rospy.loginfo("Images detected per second=%.2f",
-                                  float(self._image_counter) / (time.time() - self.start_time))
+                    rospy.loginfo(
+                        "Images detected per second=%.2f",
+                        float(self._image_counter) / (time.time() - self.start_time),
+                    )
 
                 np_image = self.convert_to_cv_image(img_msg)
 
@@ -69,11 +76,15 @@ class Detectron2node(object):
 
                 # Visualize results
                 if self._visualization:
-                    v = Visualizer(np_image[:, :, ::-1], MetadataCatalog.get(self.cfg.DATASETS.TRAIN[0]), scale=1.2)
+                    v = Visualizer(
+                        np_image[:, :, ::-1],
+                        MetadataCatalog.get(self.cfg.DATASETS.TRAIN[0]),
+                        scale=1.2,
+                    )
                     v = v.draw_instance_predictions(outputs["instances"].to("cpu"))
                     img = v.get_image()[:, :, ::-1]
 
-                    image_msg = self._bridge.cv2_to_imgmsg(img)
+                    image_msg = self._bridge.cv2_to_imgmsg(img,encoding='rgb8')
                     self._vis_pub.publish(image_msg)
 
             rate.sleep()
@@ -89,13 +100,17 @@ class Detectron2node(object):
 
         result_msg = Result()
         result_msg.header = self._header
-        result_msg.class_ids = predictions.pred_classes if predictions.has("pred_classes") else None
-        result_msg.class_names = np.array(self._class_names)[result_msg.class_ids.numpy()]
+        result_msg.class_ids = (
+            predictions.pred_classes if predictions.has("pred_classes") else None
+        )
+        result_msg.class_names = np.array(self._class_names)[
+            result_msg.class_ids.numpy()
+        ]
         result_msg.scores = predictions.scores if predictions.has("scores") else None
 
         for i, (x1, y1, x2, y2) in enumerate(boxes):
             mask = np.zeros(masks[i].shape, dtype="uint8")
-            mask[masks[i, :, :]]=255
+            mask[masks[i, :, :]] = 255
             mask = self._bridge.cv2_to_imgmsg(mask)
             result_msg.masks.append(mask)
 
@@ -118,18 +133,21 @@ class Detectron2node(object):
         channels = int(len(image_msg.data) / (self._width * self._height))
 
         encoding = None
-        if image_msg.encoding.lower() in ['rgb8', 'bgr8']:
+        if image_msg.encoding.lower() in ["rgb8", "bgr8"]:
             encoding = np.uint8
-        elif image_msg.encoding.lower() == 'mono8':
+        elif image_msg.encoding.lower() == "mono8":
             encoding = np.uint8
-        elif image_msg.encoding.lower() == '32fc1':
+        elif image_msg.encoding.lower() == "32fc1":
             encoding = np.float32
             channels = 1
 
-        cv_img = np.ndarray(shape=(image_msg.height, image_msg.width, channels),
-                            dtype=encoding, buffer=image_msg.data)
+        cv_img = np.ndarray(
+            shape=(image_msg.height, image_msg.width, channels),
+            dtype=encoding,
+            buffer=image_msg.data,
+        )
 
-        if image_msg.encoding.lower() == 'mono8':
+        if image_msg.encoding.lower() == "mono8":
             cv_img = cv.cvtColor(cv_img, cv.COLOR_RGB2GRAY)
         else:
             cv_img = cv.cvtColor(cv_img, cv.COLOR_RGB2BGR)
@@ -149,10 +167,12 @@ class Detectron2node(object):
         rospy.loginfo("[Detectron2] %s: %s", param, new_param)
         return new_param
 
+
 def main(argv):
-    rospy.init_node('detectron2_ros')
+    rospy.init_node("detectron2_ros")
     node = Detectron2node()
     node.run()
 
-if __name__ == '__main__':
+
+if __name__ == "__main__":
     main(sys.argv)
